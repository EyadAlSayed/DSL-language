parser grammar DSLParser;

options { tokenVocab=DSLLexer; }

dslDocument:
    pageStructure space
   |controllerDef
   ;

pageStructure: PAGE WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* CONTROLLED_BY WHITE_SPACE* FILE_NAME_ID space OPEN_CURLY_BRACKT_ID space body? CLOSE_CURLY_BRACKT_ID;
headerStructure: TITLE OPEN_PAR_BRACKT_ID TEXT CLOSE_PAR_BRACKT_ID;

body : bodyAttributes* WHITE_SPACE*;
bodyAttributes :
        WHITE_SPACE* headerStructure (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* text (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* input (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* radioGroup (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* checkbox (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* dropDown (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* button (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* form (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* buttonSend (WHITE_SPACE| NEWLINE)*
        | WHITE_SPACE* image (WHITE_SPACE | NEWLINE)*
        ;

text : TEXT_DEF_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* (COMMA WHITE_SPACE* TEXT)? WHITE_SPACE* marginList CLOSE_PAR_BRACKT_ID;
radioGroup: space RADIO_GROUP_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* COMMA WHITE_SPACE* OPEN_SQR_BRACKT_ID WHITE_SPACE*  ( WHITE_SPACE* (FILE_NAME_ID | TEXTNUM) WHITE_SPACE* COMMA WHITE_SPACE*)*  WHITE_SPACE* (FILE_NAME_ID | TEXTNUM) WHITE_SPACE* CLOSE_SQR_BRACKT_ID WHITE_SPACE*  (COMMA WHITE_SPACE* radioDefault )? WHITE_SPACE* marginList CLOSE_PAR_BRACKT_ID;
checkbox:space CHECKBOX WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* (COMMA TEXT)? marginList CLOSE_PAR_BRACKT_ID;
dropDown:space DROPDOWN WHITE_SPACE*
                       OPEN_PAR_BRACKT_ID WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* COMMA WHITE_SPACE*
                       OPEN_SQR_BRACKT_ID WHITE_SPACE*  ( WHITE_SPACE* (FILE_NAME_ID | TEXTNUM) WHITE_SPACE* COMMA WHITE_SPACE*)*
                       WHITE_SPACE* (FILE_NAME_ID | TEXTNUM) WHITE_SPACE* CLOSE_SQR_BRACKT_ID WHITE_SPACE*
                        marginList CLOSE_PAR_BRACKT_ID;
button : space BUTTON_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* (COMMA TEXT)? marginList CLOSE_PAR_BRACKT_ID;
form : space FORM_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* (FILE_NAME_ID WHITE_SPACE* COMMA WHITE_SPACE*)* WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* CLOSE_PAR_BRACKT_ID;
buttonSend : space FILE_NAME_ID DOT SEND OPEN_PAR_BRACKT_ID TEXT marginList CLOSE_PAR_BRACKT_ID;
image : IMAGE WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* TEXT WHITE_SPACE* marginList CLOSE_PAR_BRACKT_ID;

marginList: (COMMA WHITE_SPACE* OPEN_SQR_BRACKT_ID WHITE_SPACE* TEXTNUM WHITE_SPACE* COMMA WHITE_SPACE* TEXTNUM WHITE_SPACE* COMMA WHITE_SPACE* TEXTNUM WHITE_SPACE* COMMA WHITE_SPACE* TEXTNUM WHITE_SPACE* CLOSE_SQR_BRACKT_ID)? WHITE_SPACE*;

controllerDef:  CONTROLLER_DEF WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* CONTROLLER_METHOD WHITE_SPACE* FILE_NAME_ID space
                OPEN_CURLY_BRACKT_ID space controllerTokens+ space CLOSE_CURLY_BRACKT_ID;
radioDefault:(FILE_NAME_ID | TEXTNUM);
input: INPUT OPEN_PAR_BRACKT_ID FILE_NAME_ID WHITE_SPACE* (COMMA WHITE_SPACE* TEXT)? (COMMA WHITE_SPACE* inputAttribute)? WHITE_SPACE* marginList CLOSE_PAR_BRACKT_ID;
controllerTokens:
          ifStatment
          |loop
          |print
          |assign
          |send
          |mathEquation;

send:SEND WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* TEXT WHITE_SPACE* CLOSE_PAR_BRACKT_ID WHITE_SPACE* END_STATMENT_ID space;

inputAttribute: TEXT_DEF_ID | EMAIL_AS_PARAMETER | PASSWORD_AS_PARAMETER | DATE_AS_PARAMETER;

loop:FOR_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* loopFirstVariable WHITE_SPACE* RANG WHITE_SPACE* loopSecondVariable WHITE_SPACE* CLOSE_PAR_BRACKT_ID
            OPEN_CURLY_BRACKT_ID space controllerTokens+ space CLOSE_CURLY_BRACKT_ID space;
loopVariable : (TEXTNUM | FILE_NAME_ID);
loopFirstVariable : loopVariable;
loopSecondVariable : loopVariable;

ifStatment:IF_ID WHITE_SPACE* OPEN_PAR_BRACKT_ID WHITE_SPACE* main_condition WHITE_SPACE* CLOSE_PAR_BRACKT_ID space
            OPEN_CURLY_BRACKT_ID space controllerTokens+ space CLOSE_CURLY_BRACKT_ID space;


logicalOperation:AND_OP_ID |OR_OP_ID;
main_condition: (equal_condition|(equal_condition WHITE_SPACE* binary_equal_condition+));
equal_condition:FILE_NAME_ID WHITE_SPACE* EQUAL_OP_ID WHITE_SPACE*  (textValue|FILE_NAME_ID)  WHITE_SPACE*;
binary_equal_condition:logicalOperation WHITE_SPACE* FILE_NAME_ID WHITE_SPACE* EQUAL_OP_ID WHITE_SPACE*  (textValue|FILE_NAME_ID) WHITE_SPACE*;
textValue :  (TEXT |TEXTNUM) ;
space: (NEWLINE+ | WHITE_SPACE)*;
print:PRINT_ACTION WHITE_SPACE* (textValue|FILE_NAME_ID) WHITE_SPACE* END_STATMENT_ID space;
assign:FILE_NAME_ID WHITE_SPACE* ASSIGN_OP_ID WHITE_SPACE* (textValue|FILE_NAME_ID) WHITE_SPACE* END_STATMENT_ID space;
mathEquation:FILE_NAME_ID WHITE_SPACE* ASSIGN_OP_ID WHITE_SPACE* (simpleMathEquation|simpleMathEquation WHITE_SPACE* complexMathEquation+) END_STATMENT_ID space;
simpleMathEquation : (TEXTNUM|FILE_NAME_ID) WHITE_SPACE* mathOperation WHITE_SPACE* (TEXTNUM|FILE_NAME_ID) WHITE_SPACE*;
complexMathEquation :  mathOperation WHITE_SPACE* (TEXTNUM|FILE_NAME_ID) WHITE_SPACE*  ;
mathOperation: SUM_OP_ID | MULT_OP_ID | MINUS_OP_ID | DIV_OP_ID | MOD_OP_ID;

